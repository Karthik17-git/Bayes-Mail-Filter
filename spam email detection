import tkinter as tk
from tkinter import ttk
from tkinter import scrolledtext
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
import pandas as pd

# -----------------------------
# Sample dataset
# -----------------------------
data = {
    'message': [
        'Free entry in a weekly competition to win FA Cup final tickets',
        'Hello, I would like to meet up sometime this week',
        'Congratulations! You have won a $1000 gift card',
        'Hey, are you free for a quick chat?',
        'Urgent! Your account has been compromised. Click here to secure it',
        'Hey, whatâ€™s up? Letâ€™s grab lunch soon!'
    ],
    'label': [1, 0, 1, 0, 1, 0]  # 1 = spam, 0 = not spam
}

# Create DataFrame
df = pd.DataFrame(data)
X = df['message']
y = df['label']

# Vectorize the messages
vectorizer = CountVectorizer()
X_vectorized = vectorizer.fit_transform(X)

# Train the Naive Bayes model
model = MultinomialNB()
model.fit(X_vectorized, y)

# -----------------------------
# Functions
# -----------------------------
def predict_spam():
    input_message = text_entry.get("1.0", tk.END).strip()
    if input_message:
        input_vector = vectorizer.transform([input_message])
        prediction = model.predict(input_vector)
        if prediction[0] == 1:
            result_label.config(text="ðŸš¨ This message is SPAM!", bg="#ff4d4d", fg="white")
        else:
            result_label.config(text="âœ… This message is Not Spam", bg="#4CAF50", fg="white")
    else:
        result_label.config(text="âš  Please enter a message", bg="#ffcc00", fg="black")

def reset_fields():
    text_entry.delete("1.0", tk.END)
    result_label.config(text="", bg=main_frame.cget("bg"))

def on_enter(e):
    e.widget.config(style="Hover.TButton")

def on_leave(e):
    e.widget.config(style="TButton")

# -----------------------------
# GUI Setup
# -----------------------------
root = tk.Tk()
root.title("ðŸ“§ Spam Email Detection")
root.geometry("700x500")
root.resizable(False, False)

# Background gradient using Canvas
canvas = tk.Canvas(root, width=700, height=500)
canvas.pack(fill="both", expand=True)
for i in range(0, 500):
    color = f"#%02x%02x%02x" % (240, 248 - i//3, 255)
    canvas.create_line(0, i, 700, i, fill=color)

# Main frame
main_frame = tk.Frame(root, bg="#f4f4f4", bd=2, relief="ridge")
main_frame.place(relx=0.5, rely=0.5, anchor="center", width=600, height=400)

# Title
title_label = tk.Label(main_frame, text="Spam Email Detector", font=("Arial", 20, "bold"), bg="#f4f4f4")
title_label.pack(pady=10)

# Instruction
instr_label = tk.Label(main_frame, text="Enter your message below:", font=("Arial", 12), bg="#f4f4f4")
instr_label.pack()

# Scrollable text entry
text_entry = scrolledtext.ScrolledText(main_frame, height=5, width=60, font=("Arial", 12), wrap="word", bd=2, relief="groove")
text_entry.pack(pady=10)

# Buttons
style = ttk.Style()
style.configure("TButton", font=("Arial", 12), padding=6)
style.configure("Hover.TButton", font=("Arial", 12), padding=6, background="#0078d4", foreground="white")

button_frame = tk.Frame(main_frame, bg="#f4f4f4")
button_frame.pack(pady=5)

predict_button = ttk.Button(button_frame, text="Check Spam", command=predict_spam)
predict_button.grid(row=0, column=0, padx=10)
predict_button.bind("<Enter>", on_enter)
predict_button.bind("<Leave>", on_leave)

reset_button = ttk.Button(button_frame, text="Reset", command=reset_fields)
reset_button.grid(row=0, column=1, padx=10)
reset_button.bind("<Enter>", on_enter)
reset_button.bind("<Leave>", on_leave)

# Result label
result_label = tk.Label(main_frame, text="", font=("Arial", 16, "bold"), width=25, height=2)
result_label.pack(pady=15)

root.mainloop()